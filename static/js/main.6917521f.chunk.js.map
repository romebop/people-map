{"version":3,"sources":["components/person.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PersonCard","props","className","name","id","type","placeholder","onClick","noteInput","document","querySelector","note","value","trim","addNote","notes","map","idx","testData","App","useState","data","setData","nextState","produce","draftState","person","find","p","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"yOAQMA,EAAwC,SAACC,GAW7C,OACE,sBAAKC,UAAU,cAAf,UACE,qBAAKA,UAAU,OAAf,SAAuBD,EAAME,OAC7B,uBAAOC,GAAE,UAAKH,EAAME,KAAX,eAA8BE,KAAK,OAAOC,YAAY,qBAC/D,wBAAQC,QAbU,WACpB,IAAMC,EAAYC,SAASC,cAAT,WAA2BT,EAAME,KAAjC,gBACZQ,EAAOH,EAAUI,MAAMC,OACzBF,IACFV,EAAMa,QAAQb,EAAME,KAAMQ,GAC1BH,EAAUI,MAAQ,KAQlB,sBACA,qBAAKV,UAAU,QAAf,SACGD,EAAMc,MAAMC,KAAI,SAACL,EAAMM,GACtB,OAAO,qBAAef,UAAU,OAAzB,SAAiCS,GAAvBM,YCnBrBC,EAAqB,CACzB,CACEf,KAAM,UACNY,MAAO,CACL,kBACA,+BACA,4BAGJ,CACEZ,KAAM,QACNY,MAAO,CACL,sBACA,oBACA,2BAGJ,CACEZ,KAAM,OACNY,MAAO,CACL,cACA,kCACA,iBA+BSI,MA1Bf,WAAgB,IAAD,EAEWC,mBAAmBF,GAF9B,mBAENG,EAFM,KAEAC,EAFA,KAIPR,EAAU,SAACX,EAAcQ,GAC7B,IAAMY,EAAYC,YAAQH,GAAM,SAAAI,GAC9B,IAAMC,EAASD,EAAWE,MAAK,SAAAC,GAAC,OAAIA,EAAEzB,OAASA,KACzC,OAANuB,QAAM,IAANA,KAAQX,MAAMc,KAAKlB,MAErBW,EAAQC,IAGV,OACE,mCACGF,EAAKL,KAAI,SAACU,GACT,OAAO,cAAC,EAAD,CAELvB,KAAMuB,EAAOvB,KACbY,MAAOW,EAAOX,MACdD,QAASA,GAHJY,EAAOvB,YCpCP2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASiC,eAAe,SAM1BZ,M","file":"static/js/main.6917521f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ninterface PersonCardProps {\r\n  name: string;\r\n  notes: string[];\r\n  addNote: (name: string, note: string) => void;\r\n} \r\n\r\nconst PersonCard: React.FC<PersonCardProps> = (props: PersonCardProps) => {\r\n\r\n  const handleAddNote = () => {\r\n    const noteInput = document.querySelector(`#${props.name}-note-input`) as HTMLInputElement;\r\n    const note = noteInput.value.trim();\r\n    if (note) {\r\n      props.addNote(props.name, note);\r\n      noteInput.value = '';\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div className=\"person-card\">\r\n      <div className=\"name\">{props.name}</div>\r\n      <input id={`${props.name}-note-input`} type=\"text\" placeholder=\"Enter a new note\" />\r\n      <button onClick={handleAddNote}>Add note</button>\r\n      <div className=\"notes\">\r\n        {props.notes.map((note, idx) => {\r\n          return <div key={idx} className=\"note\">{note}</div>\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { PersonCard }","import React, { useState } from 'react';\nimport produce from 'immer';\n\nimport './App.scss';\nimport { PersonCard } from './components/person';\nimport { Person } from './types';\n\nconst testData: Person[] = [\n  {\n    name: 'Wilfred',\n    notes: [\n      'hello my friend',\n      'meet at 2:00 pm at starbucks',\n      'see concert on thursday',\n    ]\n  },\n  {\n    name: 'Sarah',\n    notes: [\n      'read discomfortable',\n      'send coffee beans',\n      'ask her about her work',\n    ]\n  },\n  {\n    name: 'Jane',\n    notes: [\n      'very pretty',\n      'what is life in Georgetown like',\n      'name of dog',\n    ]\n  },\n]\n\nfunction App() {\n\n  const [data, setData] = useState<Person[]>(testData);\n\n  const addNote = (name: string, note: string) => {\n    const nextState = produce(data, draftState => {\n      const person = draftState.find(p => p.name === name);\n      person?.notes.push(note);\n    });\n    setData(nextState);\n  };\n\n  return (\n    <>\n      {data.map((person: Person) => {\n        return <PersonCard\n          key={person.name}\n          name={person.name}\n          notes={person.notes}\n          addNote={addNote}\n        />\n      })}\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}