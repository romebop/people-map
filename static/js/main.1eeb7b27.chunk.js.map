{"version":3,"sources":["cards/Cards.tsx","cards/PersonCard.tsx","cards/Chip.tsx","graph/Graph.tsx","util/parseDates.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Cards","people","allConnections","hasQuery","setSearchInputValue","peopleDispatch","useState","personInputValue","setPersonInputValue","shouldScroll","setShouldScroll","useEffect","addPersonFormRef","current","scrollIntoView","behavior","block","useRef","id","length","map","person","className","ref","type","placeholder","value","onChange","e","target","onClick","name","trim","PeopleActionType","ADD_PERSON","payload","disabled","title","PersonCard","connectionFilter","setConnectionFilter","searchableConnections","filter","ac","connections","pc","includes","filteredConnections","Fuse","keys","threshold","search","result","item","noteInputValue","setNoteInputValue","menuItemClassName","hover","isPinned","UNPIN_PERSON","width","height","viewBox","fill","d","format","createdDate","Menu","menuClassName","menuButton","open","stroke","strokeLinecap","strokeLinejoin","strokeWidth","position","MenuItem","PIN_PERSON","showConnections","HIDE_CONNECTIONS","SHOW_CONNECTIONS","DELETE_PERSON","connection","personId","overflow","setDownOverflow","onMenuChange","FocusableItem","autoFocus","MenuGroup","takeOverflow","ADD_CONNECTION","notes","onDragEnd","destination","index","source","REORDER_NOTES","startIdx","endIdx","droppableId","provided","snapshot","isDraggingOver","innerRef","droppableProps","note","idx","draggableId","isDragging","draggableProps","dragHandleProps","content","DELETE_NOTE","noteId","newNote","uuidv4","Date","ADD_NOTE","Chip","isActivated","setisActivated","tabIndex","onBlur","DELETE_CONNECTION","connectionId","Graph","svgRef","nodes","links","p","c","flat","localeCompare","o","JSON","stringify","i","a","indexOf","s","parse","getGraph","svg","d3","color","simulation","force","strength","on","link","attr","x","y","node","append","selectAll","data","join","call","event","active","alphaTarget","restart","fx","fy","drag","text","isoDateFormat","isIsoDateString","test","parseDates","obj","Object","entries","key","init","initialVal","localStorage","getItem","parsedData","peopleReducer","produce","draftState","newPerson","push","findIndex","splice","forEach","find","person1","person2","connectionIdx1","connectionIdx2","noteIdx","n","removed","App","useReducer","sort","b","query","setQuery","path","useLocation","pathname","slice","searchInputRef","setItem","filteredPeople","sortedPeople","debouncedOnSearch","debounce","to","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1eeb7b27.chunk.js","sourcesContent":["import {\r\n  Dispatch,\r\n  FC,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\n\r\nimport { PeopleAction, PeopleActionType } from 'src/App';\r\nimport { Connection, Person } from 'src/types';\r\nimport { PersonCard } from 'src/cards';\r\n\r\nimport './Cards.scss';\r\n\r\ninterface CardsProps {\r\n  people: Person[];\r\n  allConnections: Connection[];\r\n  hasQuery: boolean;\r\n  setSearchInputValue: (name: string) => void;\r\n  peopleDispatch: Dispatch<PeopleAction>;\r\n} \r\n\r\nconst Cards: FC<CardsProps> = ({ people, allConnections, hasQuery, setSearchInputValue, peopleDispatch }: CardsProps) => {\r\n\r\n  const [personInputValue, setPersonInputValue] = useState<string>('');\r\n  const [shouldScroll, setShouldScroll] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    if (!shouldScroll) return;\r\n    addPersonFormRef.current!.scrollIntoView({ behavior: 'smooth', block: 'end' });\r\n    setShouldScroll(false);\r\n  }, [shouldScroll])\r\n\r\n  const addPersonFormRef = useRef<HTMLFormElement>(null);\r\n\r\n  const onAddPerson = () => {\r\n    const name = personInputValue.trim();\r\n    if (name) {\r\n      peopleDispatch({\r\n        type: PeopleActionType.ADD_PERSON,\r\n        payload: { name },\r\n      });\r\n      setPersonInputValue('');\r\n      setShouldScroll(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div id=\"person-cards-container\">\r\n        {people.length > 0\r\n          ? people.map((person: Person) => {\r\n            return <PersonCard\r\n              key={person.id}\r\n              person={person}\r\n              allConnections={allConnections}\r\n              setSearchInputValue={setSearchInputValue}\r\n              peopleDispatch={peopleDispatch}\r\n            />\r\n          })\r\n          : hasQuery\r\n            ? <div className=\"no-people-placeholder\">We didn't find anything</div>\r\n            : <div className=\"no-people-placeholder\">Add a new person!</div>\r\n        }\r\n      </div>\r\n      <form\r\n        ref={addPersonFormRef}\r\n        id=\"add-person-line\"\r\n      >\r\n        <input\r\n          id=\"add-person-input\"\r\n          type=\"text\"\r\n          placeholder=\"Enter a name\"\r\n          value={personInputValue}\r\n          onChange={e => setPersonInputValue(e.target.value)}\r\n        />\r\n        <button \r\n          id=\"add-person-button\"\r\n          type=\"submit\"\r\n          onClick={onAddPerson}\r\n          disabled={personInputValue.trim().length === 0}\r\n          title=\"Add Person\"\r\n        >+ Person</button>\r\n      </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport { Cards };","import { format } from 'date-fns'; \r\nimport Fuse from 'fuse.js';\r\nimport { Dispatch, FC, useState } from 'react';\r\nimport { DragDropContext, Draggable, Droppable, DropResult } from 'react-beautiful-dnd';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FocusableItem, Menu, MenuGroup, MenuItem } from '@szhsin/react-menu';\r\n\r\nimport { PeopleAction, PeopleActionType } from 'src/App';\r\nimport { Chip } from 'src/cards';\r\nimport { Connection, Note, Person } from 'src/types';\r\n\r\nimport '@szhsin/react-menu/dist/index.css';\r\nimport '@szhsin/react-menu/dist/transitions/slide.css';\r\n\r\nimport './PersonCard.scss';\r\n\r\ninterface PersonCardProps {\r\n  person: Person;\r\n  allConnections: Connection[];\r\n  setSearchInputValue: (name: string) => void;\r\n  peopleDispatch: Dispatch<PeopleAction>;\r\n} \r\n\r\nconst PersonCard: FC<PersonCardProps> = ({ person, allConnections, setSearchInputValue, peopleDispatch }: PersonCardProps) => {\r\n\r\n  const [connectionFilter, setConnectionFilter] = useState<string>('');\r\n  const searchableConnections = allConnections.filter(ac =>\r\n    ac.id !== person.id\r\n    && !person.connections.map(pc => pc.id).includes(ac.id)\r\n  );\r\n  const filteredConnections: Connection[] = connectionFilter\r\n    ? new Fuse(searchableConnections, {\r\n        keys: ['name'],\r\n        threshold: 0.4,\r\n      })\r\n      .search(connectionFilter)\r\n      .map(result => result.item)\r\n    : searchableConnections;\r\n  const [noteInputValue, setNoteInputValue] = useState<string>('');\r\n\r\n  const onAddNote = () => {\r\n    const content = noteInputValue.trim();\r\n    if (content) {\r\n      const newNote: Note = {\r\n        id: uuidv4(),\r\n        content,\r\n        createdDate: new Date(),\r\n      };\r\n      peopleDispatch({\r\n        type: PeopleActionType.ADD_NOTE,\r\n        payload: { id: person.id, note: newNote },\r\n      });\r\n      setNoteInputValue('');\r\n    }\r\n  };\r\n\r\n  const onDragEnd = (result: DropResult) => {\r\n    if (!result.destination) return;\r\n    if (result.destination.index === result.source.index) return;\r\n    peopleDispatch({\r\n      type: PeopleActionType.REORDER_NOTES,\r\n      payload: { id: person.id, startIdx: result.source.index, endIdx: result.destination.index },\r\n    });\r\n  };\r\n\r\n  const menuItemClassName = ({ hover }: { hover: boolean }) => hover ? 'menu-item hover' : 'menu-item';\r\n\r\n  return (\r\n    <div className='person-card'>\r\n      <div className='top-section'>\r\n        {person.isPinned && <button\r\n          className='pin-button'\r\n          title='Unpin'\r\n          onClick={() => peopleDispatch({\r\n            type: PeopleActionType.UNPIN_PERSON,\r\n            payload: { id: person.id },\r\n          })}\r\n        >\r\n          <svg\r\n            className='pin-icon'\r\n            width='24'\r\n            height='24'\r\n            viewBox='0 0 24 24'\r\n          >\r\n            <path\r\n              fill='none'\r\n              d='M0 0h24v24H0z'\r\n            />\r\n            <path\r\n              className='pin-icon-path'\r\n              d='M17 4a2 2 0 0 0-2-2H9c-1.1 0-2 .9-2 2v7l-2 3v2h6v5l1 1 1-1v-5h6v-2l-2-3V4z'\r\n            />\r\n          </svg>\r\n        </button>}\r\n        {/* <svg\r\n          width='24'\r\n          height='24'\r\n          viewBox='0 0 24 24'\r\n        >\r\n          <path\r\n            fill='none'\r\n            d='M0 0h24v24H0z'\r\n          />\r\n          <path\r\n            fill='#000'\r\n            d='M17 4v7l2 3v2h-6v5l-1 1-1-1v-5H5v-2l2-3V4c0-1.1.9-2 2-2h6c1.11 0 2 .89 2 2zM9 4v7.75L7.5 14h9L15 11.75V4H9z'\r\n          />\r\n        </svg> */}\r\n        <div\r\n          className='name-text'\r\n          title={format(person.createdDate, \"MM/dd/yyyy hh:mm aaaaa'm\")}\r\n        >{person.name}</div>\r\n        <Menu\r\n          menuClassName='menu'\r\n          menuButton={\r\n            ({ open }) =>\r\n              <button\r\n                className={`more-button ${open ? 'show opening' : ''}`}\r\n              >\r\n                <svg\r\n                  className='more-icon'\r\n                  fill='none'\r\n                  viewBox='0 0 24 24'\r\n                  stroke='#444'\r\n                >\r\n                  <path\r\n                    strokeLinecap='round'\r\n                    strokeLinejoin='round'\r\n                    strokeWidth={2}\r\n                    d='M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z'\r\n                  />\r\n                </svg>\r\n              </button>\r\n          }\r\n          position='anchor'\r\n        > \r\n          {\r\n            person.isPinned\r\n              ? <MenuItem\r\n                  className={menuItemClassName}\r\n                  onClick={() => peopleDispatch({\r\n                    type: PeopleActionType.UNPIN_PERSON,\r\n                    payload: { id: person.id },\r\n                  })}\r\n                >Unpin card</MenuItem>\r\n              : <MenuItem\r\n                  className={menuItemClassName}\r\n                  onClick={() => peopleDispatch({\r\n                    type: PeopleActionType.PIN_PERSON,\r\n                    payload: { id: person.id },\r\n                  })}\r\n                >Pin card</MenuItem>\r\n          }\r\n          {\r\n            person.showConnections\r\n              ? <MenuItem\r\n                  className={menuItemClassName}\r\n                  onClick={() => peopleDispatch({\r\n                    type: PeopleActionType.HIDE_CONNECTIONS,\r\n                    payload: { id: person.id },\r\n                  })}\r\n                >Hide connections</MenuItem>\r\n              : <MenuItem\r\n                  className={menuItemClassName}\r\n                  onClick={() => peopleDispatch({\r\n                    type: PeopleActionType.SHOW_CONNECTIONS,\r\n                    payload: { id: person.id },\r\n                  })}\r\n                >Show connections</MenuItem>\r\n          }\r\n          <MenuItem\r\n            className={menuItemClassName}\r\n            onClick={() => peopleDispatch({\r\n              type: PeopleActionType.DELETE_PERSON,\r\n              payload: { id: person.id },\r\n            })}\r\n          >Delete card</MenuItem>\r\n        </Menu>\r\n      </div>\r\n      <div className={`connections ${person.showConnections ? 'show' : ''}`}>\r\n        {person.connections.map(connection => {\r\n          return <Chip\r\n            key={connection.id}\r\n            personId={person.id}\r\n            connection={connection}\r\n            setSearchInputValue={setSearchInputValue}\r\n            peopleDispatch={peopleDispatch}\r\n          />\r\n        })}\r\n        <Menu\r\n          menuClassName='menu'\r\n          menuButton={\r\n            ({ open }) =>\r\n              <button\r\n                className={`add-connection-button ${open ? 'show opening' : (person.connections.length === 0 ? 'show' : '')}`}\r\n                title='Add connection'\r\n              >\r\n                <svg\r\n                  className='add-connection-icon'\r\n                  viewBox=\"0 0 24 24\"\r\n                  strokeWidth={2}\r\n                >\r\n                  <path\r\n                    strokeLinecap='round'\r\n                    strokeLinejoin='round'\r\n                    d='M12 4v16m8-8H4'\r\n                  />\r\n                </svg>  \r\n              </button>\r\n          }\r\n          overflow='auto'\r\n          setDownOverflow\r\n          position='anchor'\r\n          onMenuChange={e => e.open && setConnectionFilter('')}\r\n        >\r\n          <FocusableItem>\r\n            {({ ref }) => (\r\n              <input\r\n                autoFocus\r\n                ref={ref}\r\n                className='connection-filter-input'\r\n                type='text'\r\n                placeholder='Filter connections'\r\n                value={connectionFilter}\r\n                onChange={e => setConnectionFilter(e.target.value)}\r\n              />\r\n            )}\r\n          </FocusableItem>\r\n          {filteredConnections.length\r\n            ? <MenuGroup takeOverflow>\r\n                {filteredConnections.map(({ name, id }) =>\r\n                  <MenuItem\r\n                    key={id}\r\n                    className={menuItemClassName}\r\n                    onClick={() => peopleDispatch({\r\n                      type: PeopleActionType.ADD_CONNECTION,\r\n                      payload: { id: person.id, connection: { name, id } },\r\n                    })}\r\n                  >{name}</MenuItem>)}\r\n              </MenuGroup>\r\n            : (searchableConnections.length && connectionFilter.trim().length)\r\n              ? <div className='no-connections-placeholder'>Person not found</div>\r\n              : <div className='no-connections-placeholder'>None available</div>}\r\n        </Menu>\r\n      </div>\r\n      {person.notes.length\r\n        ? <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId={person.id}>\r\n              {(provided, snapshot) => (\r\n                <div\r\n                  className={`notes ${snapshot.isDraggingOver ? 'dragging-over' : ''}`}\r\n                  ref={provided.innerRef}\r\n                  {...provided.droppableProps}\r\n                >\r\n                  {person.notes.map((note: Note, idx: number) => {\r\n                    return (\r\n                      <Draggable\r\n                        key={note.id}\r\n                        draggableId={note.id}\r\n                        index={idx}\r\n                      >\r\n                        {(provided, snapshot) => (\r\n                          <div\r\n                            className={`note ${snapshot.isDragging ? 'dragging' : ''}`}\r\n                            ref={provided.innerRef}\r\n                            {...provided.draggableProps}\r\n                          >\r\n                            <div\r\n                              className='drag-note-handle'\r\n                              {...provided.dragHandleProps}\r\n                            >\r\n                              <svg\r\n                                className='drag-note-icon'\r\n                                viewBox='0 0 24 36'\r\n                              >\r\n                                <path d='M9.17627 7.35286C9.17627 8.91224 7.91228 10.1765 6.35291 10.1765C4.79353 10.1765 3.5293 8.91224 3.5293 7.35286C3.5293 5.79349 4.79353 4.52949 6.35291 4.52949C7.91228 4.52949 9.17627 5.79349 9.17627 7.35286Z'/>\r\n                                <path d='M9.17627 17.6471C9.17627 19.2064 7.91228 20.4707 6.35291 20.4707C4.79353 20.4707 3.5293 19.2064 3.5293 17.6471C3.5293 16.0877 4.79353 14.8235 6.35291 14.8235C7.91228 14.8235 9.17627 16.0877 9.17627 17.6471Z'/>\r\n                                <path d='M9.17627 27.9414C9.17627 29.5008 7.91228 30.7647 6.35291 30.7647C4.79353 30.7647 3.5293 29.5008 3.5293 27.9414C3.5293 26.382 4.79353 25.1178 6.35291 25.1178C7.91228 25.1178 9.17627 26.382 9.17627 27.9414Z'/>\r\n                                <path d='M20.4706 7.35286C20.4706 8.91224 19.2063 10.1765 17.647 10.1765C16.0876 10.1765 14.8236 8.91224 14.8236 7.35286C14.8236 5.79349 16.0876 4.52949 17.647 4.52949C19.2063 4.52949 20.4706 5.79349 20.4706 7.35286Z'/>\r\n                                <path d='M20.4706 17.6471C20.4706 19.2064 19.2063 20.4707 17.647 20.4707C16.0876 20.4707 14.8236 19.2064 14.8236 17.6471C14.8236 16.0877 16.0876 14.8235 17.647 14.8235C19.2063 14.8235 20.4706 16.0877 20.4706 17.6471Z'/>\r\n                                <path d='M20.4706 27.9414C20.4706 29.5008 19.2063 30.7647 17.647 30.7647C16.0876 30.7647 14.8236 29.5008 14.8236 27.9414C14.8236 26.382 16.0876 25.1178 17.647 25.1178C19.2063 25.1178 20.4706 26.382 20.4706 27.9414Z'/>\r\n                              </svg>\r\n                            </div>\r\n                            <div\r\n                              className='note-text'\r\n                              title={format(note.createdDate, \"MM/dd/yyyy hh:mm aaaaa'm\")}\r\n                            >{note.content}</div>\r\n                            <button\r\n                              className='delete-note-button'\r\n                              title='Delete note'\r\n                              onClick={() => peopleDispatch({\r\n                                type: PeopleActionType.DELETE_NOTE,\r\n                                payload: { personId: person.id, noteId: note.id },\r\n                              })}\r\n                            >\r\n                              <svg\r\n                                fill='none'\r\n                                viewBox='0 0 24 24'\r\n                                className='delete-note-icon'\r\n                              >\r\n                                <path\r\n                                  strokeLinecap='round'\r\n                                  strokeLinejoin='round'\r\n                                  strokeWidth={2}\r\n                                  d='M6 18L18 6M6 6l12 12'\r\n                                />\r\n                              </svg>\r\n                            </button>\r\n                          </div>\r\n                        )}\r\n                      </Draggable>\r\n                    );\r\n                  })}\r\n                  {provided.placeholder}\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n          </DragDropContext>\r\n        : <div className='notes'>\r\n            <div className='no-notes-placeholder'>You currently have no notes for this person</div>\r\n          </div>}\r\n      <form className='note-input-section'>\r\n        <input\r\n          className='note-input'\r\n          type='text'\r\n          placeholder='Write a note'\r\n          value={noteInputValue}\r\n          onChange={e => setNoteInputValue(e.target.value)}\r\n        />\r\n        <button\r\n          className='add-note-button'\r\n          type='submit'\r\n          onClick={onAddNote}\r\n          disabled={noteInputValue.trim().length === 0}\r\n          title='Add note'\r\n        >+ Note</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { PersonCard };","import { Dispatch, FC, useState } from 'react';\n\nimport { PeopleAction, PeopleActionType } from 'src/App';\nimport { Connection } from 'src/types';\n\nimport './Chip.scss';\n\ninterface ChipProps {\n  personId: string;\n  connection: Connection;\n  setSearchInputValue: (name: string) => void;\n  peopleDispatch: Dispatch<PeopleAction>;\n} \n\nconst Chip: FC<ChipProps> = ({ personId, connection, setSearchInputValue, peopleDispatch }: ChipProps) => {\n\n  const [isActivated, setisActivated] = useState<boolean>(false);\n\n  return (\n    <div\n      className={`chip ${isActivated ? 'activated' : ''}`}\n      tabIndex={0}\n      onClick={() => setisActivated(true)}\n      onBlur={() => setisActivated(false)}\n    >\n      <div\n        className='chip-text'\n        title='Search connection'\n        onClick={() => {\n          if (!isActivated) return;\n          setSearchInputValue(connection.name);\n        }}\n      >{connection.name}</div>\n      <div \n        className='delete-chip-button'\n        title='Delete connection'\n        onClick={() => peopleDispatch({\n          type: PeopleActionType.DELETE_CONNECTION,\n          payload: { personId, connectionId: connection.id },\n        })}\n      >\n        <svg\n          fill='none'\n          viewBox='0 0 24 24'\n          className='delete-chip-icon'\n        >\n          <path\n            strokeLinecap='round'\n            strokeLinejoin='round'\n            strokeWidth={2}\n            d='M6 18L18 6M6 6l12 12'\n          />\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nexport { Chip };","import * as d3 from 'd3';\r\nimport { FC, useEffect, useRef } from 'react';\r\n\r\nimport { Person } from 'src/types';\r\n\r\nimport './Graph.scss';\r\n\r\ninterface GraphProps {\r\n  people: Person[];\r\n} \r\n\r\n// eslint-disable-next-line no-empty-pattern\r\nconst Graph: FC<GraphProps> = ({ people }: GraphProps) => {\r\n\r\n  const svgRef = useRef<SVGSVGElement>(null);\r\n\r\n  const width = 980;\r\n  const height = 680;\r\n\r\n  const getGraph = (people: Person[]) => ({\r\n    nodes: [\r\n      { name: 'me' },\r\n      ...people.map(({ name }) => ({ name })),\r\n    ],\r\n    links: [\r\n      ...people.map(({ name }) => ({\r\n        source: 'me',\r\n        target: name,\r\n      })),\r\n      ...people.map(\r\n        p => p.connections.map(\r\n          c => ({ source: p.name, target: c.name })\r\n        )\r\n      )\r\n      .flat()\r\n      .map(({ source, target }) =>\r\n        source.localeCompare(target) < 0\r\n          ? { source, target }\r\n          : { source: target, target: source }\r\n      )\r\n      .map(o => JSON.stringify(o))\r\n      .filter((e, i, a) => i === a.indexOf(e))\r\n      .map(s => JSON.parse(s)),\r\n    ],\r\n  });\r\n\r\n  useEffect(() => {\r\n\r\n\r\n    const { nodes, links } = getGraph(people);\r\n    \r\n    const svg = d3.select(svgRef.current);\r\n    // svg.selectAll('g').remove();\r\n    const width = 540;\r\n    const height = 400;\r\n    const color = d3.scaleOrdinal(d3.schemePastel2);\r\n\r\n    const simulation = d3.forceSimulation(nodes as any)\r\n      .force('link', d3.forceLink(links).id((d: any) => d.name))\r\n      .force('charge', d3.forceManyBody().strength(-500))\r\n      .force('center', d3.forceCenter(width / 2, height / 2))\r\n      .on('tick', ticked);\r\n\r\n    const link = svg.append('g')\r\n        .attr('stroke', '#999')\r\n        .attr('stroke-opacity', 0.4)\r\n        .attr('stroke-width', 1)\r\n        .attr('stroke-linecap', 'round')\r\n      .selectAll('line')\r\n      .data(links)\r\n      .join('line');\r\n    \r\n    const node = svg.append('g')\r\n        .attr('stroke-opacity', 1)\r\n      .selectAll('circle')\r\n      // .selectAll('g')\r\n      .data(nodes)\r\n      .join('circle')\r\n        .attr('stroke', '#ccc')\r\n        .attr('r', d => {\r\n          if (d.name === 'me') return 16;\r\n          return 10;\r\n        })\r\n        .attr('stroke-width', d => {\r\n          if (d.name === 'me') return 2;\r\n          return 1.5;\r\n        })\r\n        .attr('fill', d => {\r\n          if (d.name === 'me') return '#fff';\r\n          return color(d.name);\r\n        })\r\n        .call(drag(simulation) as any);\r\n\r\n    node.append('title').text((d: any) => d.name);\r\n\r\n    function ticked() {\r\n      link.attr('x1', (d: any) => d.source.x)\r\n        .attr('y1', (d: any) => d.source.y)\r\n        .attr('x2', (d: any) => d.target.x)\r\n        .attr('y2', (d: any) => d.target.y);\r\n      node.attr('cx', (d: any) => d.x)\r\n        .attr('cy', (d: any) => d.y);\r\n    }\r\n\r\n    function drag(simulation: any) {\r\n      function dragStarted(event: any, d: any) {\r\n        if (!event.active) simulation.alphaTarget(0.3).restart();\r\n        d.fx = d.x;\r\n        d.fy = d.y;\r\n      }\r\n      function dragged(event: any, d: any) {\r\n        d.fx = event.x;\r\n        d.fy = event.y;\r\n      }\r\n      function dragEnded(event: any, d: any) {\r\n        if (!event.active) simulation.alphaTarget(0);\r\n        d.fx = null;\r\n        d.fy = null;\r\n      }\r\n      return d3.drag()\r\n        .on('start', dragStarted)\r\n        .on('drag', dragged)\r\n        .on('end', dragEnded);\r\n    }\r\n  \r\n  }, [people]);\r\n\r\n  return (\r\n    <svg\r\n      id='d3-svg'\r\n      ref={svgRef}\r\n      width={width}\r\n      height={height}\r\n      viewBox={`${-width / 5} ${-height / 5} ${width} ${height}`}\r\n    ></svg>\r\n  );\r\n}\r\n\r\nexport { Graph };","const isoDateFormat = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[-+]\\d{2}:?\\d{2}|Z)?$/;\r\n\r\nfunction isIsoDateString(value: any): boolean {\r\n  return value\r\n    && typeof(value) === 'string'\r\n    && isoDateFormat.test(value);\r\n}\r\n\r\nfunction parseDates(obj: any): void {\r\n  for (const [key, value] of Object.entries(obj)) {\r\n    if (isIsoDateString(value)) {\r\n      obj[key] = new Date(value as string);\r\n    }\r\n    if (typeof(value) === 'object') {\r\n      parseDates(value);\r\n    }\r\n  }\r\n}\r\n\r\nexport { parseDates };","import Fuse from 'fuse.js';\r\nimport produce from 'immer';\r\nimport { debounce } from 'lodash';\r\nimport {\r\n  ChangeEvent,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n  useReducer,\r\n } from 'react';\r\n import {\r\n  NavLink,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n  useLocation,\r\n} from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { Cards } from 'src/cards';\r\nimport { Graph } from 'src/graph';\r\nimport { Connection, Person } from 'src/types';\r\nimport { parseDates } from 'src/util';\r\n\r\nimport './App.scss';\r\n\r\nexport enum PeopleActionType {\r\n  ADD_PERSON = 'ADD_PERSON',\r\n  DELETE_PERSON = 'DELETE_PERSON',\r\n  PIN_PERSON = 'PIN_PERSON',\r\n  UNPIN_PERSON = 'UNPIN_PERSON',\r\n  SHOW_CONNECTIONS = 'SHOW_CONNECTIONS',\r\n  HIDE_CONNECTIONS = 'HIDE_CONNECTIONS',\r\n  ADD_CONNECTION = 'ADD_CONNECTION',\r\n  DELETE_CONNECTION = 'DELETE_CONNECTION',\r\n  ADD_NOTE = 'ADD_NOTE',\r\n  DELETE_NOTE = 'DELETE_NOTE',\r\n  REORDER_NOTES = 'REORDER_NOTES',\r\n  // UPLOAD_PEOPLE = 'UPLOAD_PEOPLE',\r\n}\r\n\r\nexport interface PeopleAction {\r\n  type: PeopleActionType;\r\n  payload?: any;\r\n}\r\n\r\nfunction init(initialVal: Person[]): Person[] {\r\n  const data = localStorage.getItem('data');\r\n  if (data !== null) {\r\n    const parsedData = JSON.parse(data);\r\n    parseDates(parsedData);\r\n    return parsedData;\r\n  }\r\n  return initialVal;\r\n}\r\n\r\nfunction peopleReducer(people: Person[], { type, payload }: PeopleAction): Person[] {\r\n  switch (type) {\r\n    case PeopleActionType.ADD_PERSON:\r\n      return produce(people, draftState => {\r\n        const newPerson: Person = {\r\n          id: uuidv4(),\r\n          name: payload.name,\r\n          notes: [],\r\n          createdDate: new Date(),\r\n          isPinned: false,\r\n          showConnections: false,\r\n          connections: [],\r\n        };\r\n        draftState.push(newPerson);\r\n      });\r\n    case PeopleActionType.DELETE_PERSON:\r\n      return produce(people, draftState => {\r\n        const idx = draftState.findIndex(p => p.id === payload.id);\r\n        draftState.splice(idx, 1);\r\n        draftState.forEach(p => {\r\n          p.connections = p.connections.filter(c => c.id !== payload.id);\r\n        });\r\n      });\r\n    case PeopleActionType.PIN_PERSON:\r\n      return produce(people, draftState => {\r\n        const person = draftState.find(p => p.id === payload.id);\r\n        person!.isPinned = true;\r\n      });\r\n    case PeopleActionType.UNPIN_PERSON:\r\n      return produce(people, draftState => {\r\n        const person = draftState.find(p => p.id === payload.id);\r\n        person!.isPinned = false;\r\n      });\r\n    case PeopleActionType.SHOW_CONNECTIONS:\r\n      return produce(people, draftState => {\r\n        const person = draftState.find(p => p.id === payload.id);\r\n        person!.showConnections = true;\r\n      });\r\n    case PeopleActionType.HIDE_CONNECTIONS:\r\n      return produce(people, draftState => {\r\n        const person = draftState.find(p => p.id === payload.id);\r\n        person!.showConnections = false;\r\n      });\r\n    case PeopleActionType.ADD_CONNECTION:\r\n      return produce(people, draftState => {\r\n        const person1 = draftState.find(p => p.id === payload.id);\r\n        person1?.connections.push(payload.connection);\r\n        const person2 = draftState.find(p => p.id === payload.connection.id);\r\n        person2?.connections.push({ name: person1?.name!, id: payload.id });\r\n        // TODO: sort?\r\n      });\r\n    case PeopleActionType.DELETE_CONNECTION:\r\n      return produce(people, draftState => {\r\n        const person1 = draftState.find(p => p.id === payload.personId);\r\n        const connectionIdx1 = person1?.connections?.findIndex(c => c.id === payload.connectionId);\r\n        person1?.connections?.splice(connectionIdx1!, 1);\r\n        const person2 = draftState.find(p => p.id === payload.connectionId);\r\n        const connectionIdx2 = person2?.connections?.findIndex(c => c.id === payload.personId);\r\n        person2?.connections?.splice(connectionIdx2!, 1);\r\n      });\r\n    case PeopleActionType.ADD_NOTE:\r\n      return produce(people, draftState => {\r\n        const person = draftState.find(p => p.id === payload.id);\r\n        person?.notes.push(payload.note);\r\n      });\r\n    case PeopleActionType.DELETE_NOTE:\r\n      return produce(people, draftState => {\r\n        const person = draftState.find(p => p.id === payload.personId);\r\n        const noteIdx = person?.notes?.findIndex(n => n.id === payload.noteId);\r\n        person?.notes?.splice(noteIdx!, 1);\r\n      });\r\n    case PeopleActionType.REORDER_NOTES:\r\n      return produce(people, draftState => {\r\n        const person = draftState.find(p => p.id === payload.id);\r\n        const [removed] = person?.notes.splice(payload.startIdx, 1)!;\r\n        person?.notes.splice(payload.endIdx, 0, removed);\r\n      });\r\n    default:\r\n      return people;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [people, peopleDispatch] = useReducer(peopleReducer, [], init);\r\n  const allConnections: Connection[] = people.map(({ name, id }) => ({ name, id  }))\r\n    .sort((a, b) => a.name.localeCompare(b.name));\r\n  const [query, setQuery] = useState<string>('');\r\n  const hasQuery = query.trim().length > 0;\r\n\r\n  const path = useLocation().pathname.slice(1);\r\n\r\n  const searchInputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('data', JSON.stringify(people));\r\n  }, [people]);\r\n\r\n  const filteredPeople: Person[] = query\r\n    ? new Fuse(people, {\r\n        keys: ['name', 'notes.content'],\r\n        threshold: 0.4,\r\n      })\r\n      .search(query)\r\n      .map(result => result.item)\r\n    : people;\r\n\r\n  const sortedPeople: Person[] = [\r\n    ...filteredPeople.filter(p => p.isPinned),\r\n    ...filteredPeople.filter(p => !p.isPinned),\r\n  ]\r\n\r\n  const onSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(e?.target?.value);\r\n  }\r\n  const debouncedOnSearch = useRef(\r\n    debounce(onSearch, 150)\r\n  ).current;\r\n\r\n  const setSearchInputValue = (name: string) => {\r\n    searchInputRef.current!.value = name;\r\n    setQuery(name);\r\n  };\r\n\r\n  // const onDataUpload = (e: ChangeEvent<HTMLInputElement>) => {\r\n  //   const [file] = e.target.files!;\r\n  //   const reader = new FileReader();\r\n  //   reader.readAsText(file);\r\n  //   reader.onload = (e: ProgressEvent<FileReader>) => {\r\n  //     console.log(e.target?.result);\r\n  //   };\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <div id='top-container'>\r\n        <div id='search-container'>\r\n          <svg\r\n            id='search-icon'\r\n            className={`${hasQuery ? 'active' : ''}`}\r\n            fill='none'\r\n            viewBox='0 0 24 24'\r\n          >\r\n            <path\r\n              strokeLinecap='round'\r\n              strokeLinejoin='round'\r\n              strokeWidth={3}\r\n              d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'\r\n            />\r\n          </svg>\r\n          <input\r\n            ref={searchInputRef}\r\n            id='search-input'\r\n            type='text'\r\n            placeholder='Search by name, note'\r\n            onChange={debouncedOnSearch}\r\n          />\r\n          <button\r\n            id='delete-query-button'\r\n            title='Clear'\r\n            className={`${hasQuery ? 'show' : ''}`}\r\n            onClick={() => setSearchInputValue('')}\r\n          >\r\n            <svg\r\n              fill='none'\r\n              viewBox='0 0 24 24'\r\n              id='delete-query-icon'\r\n            >\r\n              <path\r\n                strokeLinecap='round'\r\n                strokeLinejoin='round'\r\n                strokeWidth={3}\r\n                d='M6 18L18 6M6 6l12 12'\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        <div id='links-container'>\r\n          <NavLink\r\n            to='/cards'\r\n            title='Card View'\r\n          >\r\n            <svg\r\n              fill='none'\r\n              viewBox='0 0 24 24'\r\n              stroke='#000'\r\n            >\r\n              <path\r\n                strokeLinecap='round'\r\n                strokeLinejoin='round'\r\n                strokeWidth={2}\r\n                d='M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10'\r\n              />\r\n            </svg>\r\n          </NavLink>\r\n          <NavLink\r\n            to='/graph'\r\n            title='Graph View'\r\n          >\r\n            <svg\r\n              fill='none'\r\n              viewBox='0 0 24 24'\r\n              stroke='#000'\r\n            >\r\n              <path\r\n                strokeLinecap='round'\r\n                strokeLinejoin='round'\r\n                strokeWidth={2}\r\n                d='M14 10l-2 1m0 0l-2-1m2 1v2.5M20 7l-2 1m2-1l-2-1m2 1v2.5M14 4l-2-1-2 1M4 7l2-1M4 7l2 1M4 7v2.5M12 21l-2-1m2 1l2-1m-2 1v-2.5M6 18l-2-1v-2.5M18 18l2-1v-2.5'\r\n              />\r\n            </svg>\r\n          </NavLink>\r\n          <div className={`active-route-highlight ${path}`}></div>\r\n        </div>\r\n      </div>\r\n      <Switch>\r\n        <Route path='/cards'>\r\n          <Cards\r\n            people={sortedPeople}\r\n            allConnections={allConnections}\r\n            hasQuery={hasQuery}\r\n            setSearchInputValue={setSearchInputValue}\r\n            peopleDispatch={peopleDispatch}\r\n          >\r\n          </Cards>\r\n        </Route>\r\n        <Route path='/graph'>\r\n          <Graph\r\n            people={sortedPeople}\r\n          ></Graph>\r\n        </Route>\r\n        <Route exact path='/'>\r\n          <Redirect to='/cards' />\r\n        </Route>\r\n      </Switch>\r\n      {/* <a\r\n        style={{ marginTop: 40, display: 'block' }}\r\n        href={`data:text/json;charset=utf-8,${encodeURIComponent(\r\n          JSON.stringify(people, null, 2)\r\n        )}`}\r\n        download='people-data.json'\r\n      >Export Data</a>\r\n      <input\r\n        style={{ marginTop: 20 }}\r\n        type='file'\r\n        onChange={onDataUpload}\r\n      /> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport App from 'src/App';\nimport reportWebVitals from 'src/reportWebVitals';\n\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}