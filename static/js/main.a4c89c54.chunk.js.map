{"version":3,"sources":["components/person.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PersonCard","props","className","name","id","type","placeholder","onClick","noteInput","document","querySelector","note","value","trim","addNote","notes","map","idx","deleteNote","App","useState","allPersons","setAllPersons","query","updateQuery","searchResults","Fuse","keys","search","filteredPersons","result","item","useEffect","undefined","window","data","localStorage","getItem","JSON","parse","nextState","produce","draftState","person","find","p","push","setItem","stringify","splice","onChange","currentTarget","newPerson","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a4c89c54.chunk.js","sourcesContent":["import React from 'react';\r\nimport './person.scss';\r\n\r\ninterface PersonCardProps {\r\n  name: string;\r\n  notes: string[];\r\n  addNote: (name: string, note: string) => void;\r\n  deleteNote: (name: string, idx: number) => void;\r\n} \r\n\r\nconst PersonCard: React.FC<PersonCardProps> = (props: PersonCardProps) => {\r\n\r\n  const addNote = () => {\r\n    const noteInput = document.querySelector(`#${props.name}-note-input`) as HTMLInputElement;\r\n    const note = noteInput.value.trim();\r\n    if (note) {\r\n      props.addNote(props.name, note);\r\n      noteInput.value = '';\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div className=\"person-card\">\r\n      <div className=\"name\">{props.name}</div>\r\n      <div className=\"note-input-line\">\r\n        <input\r\n          id={`${props.name}-note-input`}\r\n          type=\"text\"\r\n          placeholder=\"Enter note\"\r\n        />\r\n        <button onClick={addNote}>Add note</button>\r\n      </div>\r\n      <div className=\"notes\">\r\n        {props.notes.map((note, idx) => {\r\n          return (\r\n            <div key={idx} className=\"note\">\r\n              <div className=\"note-text\">{note}</div>\r\n              <button\r\n                className=\"note-button\"\r\n                onClick={() => props.deleteNote(props.name, idx)}\r\n              >Delete note</button>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { PersonCard };","import Fuse from 'fuse.js';\nimport produce from 'immer';\nimport React, { useState, useEffect, ChangeEvent } from 'react';\n\nimport './App.scss';\nimport { PersonCard } from './components/person';\nimport { Person } from './types';\n\nfunction App() {\n\n  const [allPersons, setAllPersons] = useState<Person[]>([]);\n  const [query, updateQuery] = useState('');\n\n  const fuse = new Fuse(allPersons, {\n    keys: ['name', 'notes'],\n  });\n  \n  const searchResults: Fuse.FuseResult<Person>[] = fuse.search(query);\n  const filteredPersons: Person[] = query\n    ? searchResults.map(result => result.item)\n    : allPersons;\n\n  useEffect(() => {\n    if (typeof window !== undefined) {\n      const data = localStorage.getItem('data');\n      if (data !== null) {\n        return setAllPersons(JSON.parse(data));\n      }\n      return setAllPersons([]);\n    }\n  }, [])\n\n  const onSearch = ({ currentTarget }: ChangeEvent<HTMLInputElement>) => {\n    updateQuery(currentTarget.value);\n  }\n\n  const addNote = (name: string, note: string) => {\n    const nextState = produce(allPersons, draftState => {\n      const person = draftState.find(p => p.name === name);\n      person?.notes.push(note);\n    });\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('data', JSON.stringify(nextState));\n    }\n    setAllPersons(nextState);\n  };\n\n  const deleteNote = (name: string, idx: number) => {\n    const nextState = produce(allPersons, draftState => {\n      const person = draftState.find(p => p.name === name);\n      person?.notes.splice(idx, 1);\n    });\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('data', JSON.stringify(nextState));\n    }\n    setAllPersons(nextState);\n  };\n\n  const addPerson = () => {\n    const personInput = document.querySelector('#add-person-input') as HTMLInputElement;\n    const name = personInput.value.trim();\n    if (name) {\n      const nextState = produce(allPersons, draftState => {\n        const newPerson: Person = {\n          name,\n          notes: [],\n        };\n        draftState.push(newPerson);\n      });\n      if (typeof window !== 'undefined') {\n        localStorage.setItem('data', JSON.stringify(nextState));\n      }\n      setAllPersons(nextState);\n    }\n  }\n\n  return (\n    <>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={onSearch}\n      />\n      {filteredPersons.map((person: Person) => {\n        return <PersonCard\n        key={person.name}\n        name={person.name}\n        notes={person.notes}\n        addNote={addNote}\n        deleteNote={deleteNote}\n        />\n      })}\n      <div className=\"add-person-line\">\n        <input\n          id=\"add-person-input\"\n          placeholder=\"Enter name\"\n        />\n        <button onClick={addPerson}>Add person</button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}