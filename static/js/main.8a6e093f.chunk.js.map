{"version":3,"sources":["components/PersonCard.tsx","util/parseDates.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PersonCard","props","useState","inputValue","setInputValue","className","title","format","createdDate","name","onClick","deletePerson","id","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","notes","length","map","note","content","deleteNote","type","placeholder","value","onChange","e","target","trim","newNote","uuidv4","Date","addNote","disabled","isoDateFormat","isIsoDateString","test","parseDates","obj","Object","entries","key","App","allPersons","setAllPersons","query","setQuery","hasQuery","personValue","setPersonValue","useEffect","undefined","window","data","localStorage","getItem","parsedData","JSON","parse","filteredPersons","Fuse","keys","search","result","item","debouncedOnSearch","useRef","debounce","current","nextState","produce","draftState","idx","findIndex","p","splice","setItem","stringify","person","find","push","personId","noteId","noteIdx","n","newPerson","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a6e093f.chunk.js","sourcesContent":["import { format } from 'date-fns'; \r\nimport React, { useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport { Note } from '../types';\r\n\r\nimport './PersonCard.scss';\r\n\r\ninterface PersonCardProps {\r\n  id: string;\r\n  name: string;\r\n  notes: Note[];\r\n  createdDate: Date;\r\n  deletePerson: (id: string) => void;\r\n  addNote: (id: string, note: Note) => void;\r\n  deleteNote: (personId: string, noteId: string) => void;\r\n} \r\n\r\nconst PersonCard: React.FC<PersonCardProps> = (props: PersonCardProps) => {\r\n\r\n  const [inputValue, setInputValue] = useState<string>('');\r\n\r\n  const addNote = () => {\r\n    const content = inputValue.trim();\r\n    if (content) {\r\n      const newNote: Note = {\r\n        id: uuidv4(),\r\n        content,\r\n        createdDate: new Date(),\r\n      };\r\n      props.addNote(props.id, newNote);\r\n      setInputValue('');\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div className=\"person-card\">\r\n      <div className=\"name-section\">\r\n        <div\r\n          className=\"name-text\"\r\n          title={format(props.createdDate, \"MM/dd/yyyy hh:mm aaaaa'm\")}\r\n        >{props.name}</div>\r\n        <div\r\n          className=\"delete-person-button\"\r\n          title=\"Delete Person Card\"\r\n          onClick={() => props.deletePerson(props.id)}\r\n        >\r\n          <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"h-6 w-6 delete-person-icon\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"#444\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M6 18L18 6M6 6l12 12\"\r\n            />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n      <div className=\"notes\">\r\n        {props.notes.length\r\n          ? props.notes.map((note: Note) => {\r\n            return (\r\n              <div key={note.id} className=\"note\">\r\n                <div\r\n                  className=\"note-text\"\r\n                  title={format(note.createdDate, \"MM/dd/yyyy hh:mm aaaaa'm\")}\r\n                >{note.content}</div>\r\n                <div className=\"delete-note-button-container\">\r\n                  <div\r\n                    className=\"delete-note-button\"\r\n                    title=\"Delete Note\"\r\n                    onClick={() => props.deleteNote(props.id, note.id)}\r\n                  >\r\n                    <svg\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      className=\"h-6 w-6 delete-note-icon\"\r\n                      fill=\"none\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      stroke=\"#444\"\r\n                    >\r\n                      <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        strokeWidth={2}\r\n                        d=\"M6 18L18 6M6 6l12 12\"\r\n                      />\r\n                    </svg>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )\r\n          })\r\n          : <div className=\"no-notes-placeholder\">You have no notes for this person</div>\r\n        }\r\n      </div>\r\n      <form className=\"note-input-section\">\r\n        <input\r\n          className=\"note-input\"\r\n          type=\"text\"\r\n          placeholder=\"Write a Note\"\r\n          value={inputValue}\r\n          onChange={e => setInputValue(e.target.value)}\r\n        />\r\n        <button\r\n          className=\"add-note-button\"\r\n          type=\"submit\"\r\n          onClick={addNote}\r\n          disabled={inputValue.trim().length === 0}\r\n          title=\"Add Note\"\r\n        >+ Note</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { PersonCard };","const isoDateFormat = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d*)?(?:[-+]\\d{2}:?\\d{2}|Z)?$/;\r\n\r\nfunction isIsoDateString(value: any): boolean {\r\n  return value\r\n    && typeof(value) === 'string'\r\n    && isoDateFormat.test(value);\r\n}\r\n\r\nexport function parseDates(obj: any) {\r\n  for (const [key, value] of Object.entries(obj)) {\r\n    if (isIsoDateString(value)) {\r\n      obj[key] = new Date(value as string);\r\n    }\r\n    if (typeof(value) === 'object') {\r\n      parseDates(value);\r\n    }\r\n  }\r\n}","import Fuse from 'fuse.js';\nimport produce from 'immer';\nimport { debounce } from 'lodash';\nimport {\n  ChangeEvent,\n  useEffect,\n  useRef,\n  useState,\n } from 'react';\n import { v4 as uuidv4 } from 'uuid';\n\n import './App.scss';\n import { PersonCard } from './components';\n import { Person, Note } from './types';\n import { parseDates } from './util';\n\nfunction App() {\n\n  const [allPersons, setAllPersons] = useState<Person[]>([]);\n  const [query, setQuery] = useState<string>('');\n  const hasQuery = query.trim().length > 0;\n  const [personValue, setPersonValue] = useState<string>('');\n  \n  useEffect(() => {\n    if (typeof window !== undefined) {\n      const data = localStorage.getItem('data');\n      if (data !== null) {\n        const parsedData = JSON.parse(data);\n        parseDates(parsedData);\n        setAllPersons(parsedData);\n      }\n    }\n  }, []);\n\n  const filteredPersons: Person[] = query\n    ? new Fuse(allPersons, { keys: ['name', 'notes.content'] })\n      .search(query)\n      .map(result => result.item)\n    : allPersons;\n\n  const onSearch = (e: ChangeEvent<HTMLInputElement>) => {\n    setQuery(e?.target?.value);\n  }\n  const debouncedOnSearch = useRef(\n    debounce(onSearch, 150)\n  ).current;\n\n  const deletePerson = (id: string) => {\n    const nextState = produce(allPersons, draftState => {\n      const idx = draftState.findIndex(p => p.id === id);\n      draftState.splice(idx, 1);\n    });\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('data', JSON.stringify(nextState));\n    }\n    setAllPersons(nextState);\n  };\n\n  const addNote = (id: string, note: Note) => {\n    const nextState = produce(allPersons, draftState => {\n      const person = draftState.find(p => p.id === id);\n      person?.notes.push(note);\n    });\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('data', JSON.stringify(nextState));\n    }\n    setAllPersons(nextState);\n  };\n\n  const deleteNote = (personId: string, noteId: string) => {\n    const nextState = produce(allPersons, draftState => {\n      const person = draftState.find(p => p.id === personId);\n      const noteIdx = person?.notes?.findIndex(n => n.id === noteId);\n      person?.notes?.splice(noteIdx!, 1);\n    });\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('data', JSON.stringify(nextState));\n    }\n    setAllPersons(nextState);\n  };\n\n  const addPerson = () => {\n    const name = personValue.trim();\n    if (name) {\n      const nextState = produce(allPersons, draftState => {\n        const newPerson: Person = {\n          id: uuidv4(),\n          name,\n          notes: [],\n          createdDate: new Date(),\n        };\n        draftState.push(newPerson);\n      });\n      if (typeof window !== 'undefined') {\n        localStorage.setItem('data', JSON.stringify(nextState));\n      }\n      setAllPersons(nextState);\n      setPersonValue('');\n    }\n  };\n\n  return (\n    <>\n      <div id=\"search-container\">\n        <svg\n          id=\"search-icon\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          className={`h-6 w-6 ${hasQuery ? 'active' : ''}`}\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n          stroke={hasQuery ? '#0095ffcc' : 'black'}\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={3}\n            d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n          />\n        </svg>\n        <input\n          id=\"search-input\"\n          type=\"text\"\n          placeholder=\"Search by Name, Note\"\n          onChange={debouncedOnSearch}\n        />\n      </div>\n      <div id=\"person-cards-container\">\n        {filteredPersons.length > 0\n          ? filteredPersons.map((person: Person) => {\n            return <PersonCard\n              key={person.id}\n              id={person.id}\n              name={person.name}\n              notes={person.notes}\n              createdDate={person.createdDate}\n              deletePerson={deletePerson}\n              addNote={addNote}\n              deleteNote={deleteNote}\n            />\n          })\n          : hasQuery\n            ? <div className=\"no-people-placeholder\">Search didn't find anything</div>\n            : <div className=\"no-people-placeholder\">Add a new Person!</div>\n        }\n      </div>\n      <form id=\"add-person-line\">\n        <input\n          id=\"add-person-input\"\n          type=\"text\"\n          placeholder=\"Enter a Name\"\n          value={personValue}\n          onChange={e => setPersonValue(e.target.value)}\n        />\n        <button \n          id=\"add-person-button\"\n          type=\"submit\"\n          onClick={addPerson}\n          disabled={personValue.trim().length === 0}\n          title=\"Add Person\"\n        >+ Person</button>\n      </form>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}